#
# $Id: gcc.cf 9414 2011-11-23 01:25:41Z lculik $
#

include $(TOP)$(ROOT)config/$(HB_ARCHITECTURE)/global.cf

ifeq ($(HB_CMP),)
ifeq ($(HB_COMPILER),gpp)
   HB_CMP = g++
else
   HB_CMP = $(HB_COMPILER)
endif
endif

OBJ_EXT = .o
EXE_EXT =
LIB_PREF = lib
LIB_EXT = .a

CC = $(HB_CCACHE) $(HB_CMP)
CC_IN = -c
CC_OUT = -o
CPPFLAGS = -I. -I$(TOP)include -I$(HB_INC_COMPILE)

# -fno-common enables building .dylib files
CFLAGS = -Wall -W

ifeq ($(HB_LEX),SIMPLEX)
  CFLAGS += -DSIMPLEX
endif
CFLAGS += -DHB_OS_UNIX
CFLAGS += -mlp64
LDFLAGS = -mlp64

ifeq ($(HB_LIBCOMP_MT),)
  # always add thread support if not compiling a lib and using vmmt
  ifeq ($(findstring vmmt,$(LIBS)),vmmt)
    CFLAGS += -DHB_THREAD_SUPPORT -D_THREAD_SAFE -pthread
  endif
else
  # Add thread support to lib compilation only if compiling a _mt lib
  ifeq ($(HB_LIBCOMP_MT),YES)
    CFLAGS+= -DHB_THREAD_SUPPORT -D_THREAD_SAFE
    HB_MT_FLAGS = -DHB_THREAD_SUPPORT
  endif
endif

LD = $(HB_CCACHE) $(HB_CMP)
LD_OUT = -o

# Add all libraries specified in CONTRIBS and LIBS.
ifeq ($(HB_LIB_COMPILE),)
  LINKPATHS += $(foreach lib, $(CONTRIBS), -L$(TOP)$(ROOT)contrib/$(lib)/$(ARCH_DIR))
  LINKPATHS += $(foreach lib, $(LIBS), -L$(TOP)$(ROOT)source/$(lib)/$(ARCH_DIR))

  # Adding MT libs on need
  ifeq ($(findstring vmmt,$(LIBS)),vmmt)
    LINKPATHS += $(foreach lib, $(LIBS), -L$(TOP)$(ROOT)source/$(patsubst %mt,%,$(lib))/$(ARCH_DIR)_mt)
  endif

else
LINKPATHS += -L$(HB_LIB_COMPILE)
endif

# Add all libraries specified in HB_USER_LIBS.
LINKPATHS += $(foreach lib, $(HB_USER_LIBS), -L$(TOP)$(ROOT)source/$(lib)/$(ARCH_DIR))
LINKLIBS += $(foreach lib, $(HB_USER_LIBS), -l$(lib))

LINKLIBS += $(foreach lib, $(CONTRIBS), -l$(lib))
LINKLIBS += $(foreach lib, $(LIBS), -l$(lib))

# If LIBS specifies the rdd library, add all DB drivers.
ifeq ($(findstring rddmt,$(LIBS)),rddmt)
  #DBFNTX and DBFCDX are MTzed
  ifeq ($(findstring dbfcdx,$(HB_DB_DRIVERS)),dbfcdx)
    LINKPATHS += -L$(TOP)$(ROOT)source/rdd/dbfcdx/$(ARCH_DIR)_mt
    LINKLIBS += -ldbfcdxmt
  endif
  ifeq ($(findstring dbfntx,$(HB_DB_DRIVERS)),dbfntx)
    LINKPATHS += -L$(TOP)$(ROOT)source/rdd/dbfntx/$(ARCH_DIR)_mt
    LINKLIBS += -ldbfntxmt
  endif

  # DBFDBT and DBFFPT are not MTzed
  ifeq ($(findstring dbfdbt,$(HB_DB_DRIVERS)),dbfdbt)
    LINKPATHS += -L$(TOP)$(ROOT)source/rdd/dbfdbt/$(ARCH_DIR)
    LINKLIBS += -ldbfdbt
  endif
  ifeq ($(findstring dbffpt,$(HB_DB_DRIVERS)),dbffpt)
    LINKPATHS += -L$(TOP)$(ROOT)source/rdd/dbffpt/$(ARCH_DIR)
    LINKLIBS += -ldbffpt
  endif

else
  ifeq ($(findstring rdd,$(LIBS)),rdd)
    LINKPATHS += $(foreach drv, $(HB_DB_DRIVERS), -L$(TOP)$(ROOT)source/rdd/$(drv)/$(ARCH_DIR))
    LINKLIBS += $(foreach drv, $(HB_DB_DRIVERS), -l$(drv))
  endif
endif

# Add the specified GT driver library and other RTLs
ifeq ($(findstring rtl,$(LIBS)),rtl)

LINKPATHS += $(foreach gt, $(HB_GT_LIBS), -L$(TOP)$(ROOT)source/rtl/$(gt)/$(ARCH_DIR))
LINKLIBS += $(foreach gt, $(HB_GT_LIBS), -l$(gt))

# screen driver libraries
ifeq ($(HB_CRS_LIB),)
#HB_CRS_LIB=ncurses
endif

ifneq ($(findstring gtcrs, $(HB_GT_LIBS)),)
#LINKLIBS += -l$(HB_CRS_LIB)
endif

ifneq ($(findstring gtsln, $(HB_GT_LIBS)),)
LINKLIBS += -lslang
# In BSD, slang still needs curses :(
ifeq ($(findstring gtcrs, $(HB_GT_LIBS)),)
LINKLIBS += -l$(HB_CRS_LIB)
endif
endif

ifneq ($(findstring gtalleg, $(HB_GT_LIBS)),)
LINKLIBS += `allegro-config --static`
endif

ifneq ($(findstring gtxwc, $(HB_GT_LIBS)),)
LINKLIBS += -lX11
#LINKPATHS += -L/usr/X11R6/lib64
LINKPATHS += -L/usr/X11R6/lib
endif

# HB_GPM_MOUSE: use gpm mouse driver
# Actually, there is no gpm on BSD.
ifeq ($(HB_GPM_MOUSE),yes)
LINKLIBS += -lgpm
endif

endif

# New pcrepos library
ifeq ($(findstring rtl,$(LIBS)),rtl)
LINKPATHS += -L$(TOP)$(ROOT)source/rtl/pcre/$(ARCH_DIR)
LINKLIBS += -lpcrepos
LINKPATHS += -L$(TOP)$(ROOT)source/rtl/zlib/$(ARCH_DIR)
LINKLIBS += -lzlib
endif

LINKLIBS += -lm

LDFLAGS = $(LINKPATHS)
LD_RULE = $(LD) $(CFLAGS) $(LD_OUT) $@ $(^F) $(LDFLAGS) $(L_USR) $(LINKLIBS) $(LINKLIBS)

AR = ar
ARFLAGS = $(A_USR)
AR_RULE = $(AR) $(ARFLAGS) cru $@ $(^F) && $(RANLIB) $@ || ( $(RM) $@ && false )

include $(TOP)$(ROOT)config/rules.cf
