/*  $DOC$
 *  $FUNCNAME$
 *      CHARLIST()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Generates a list of all characters in a string
 *  $SYNTAX$
 *      CHARLIST ([<cString>]) -> cCharacterList
 *  $ARGUMENTS$
 *      [<cString>]       is the string for whom the function generates a list
 *                        of all characters
 *                        Default: "" (empty string)
 *  $RETURNS$
 *      <cCharacterList>  a list of the characters in <cString>
 *  $DESCRIPTION$
 *      The CHARLIST() function generates a list of those characters that
 *      are contained in <cString>. This list can contain each character
 *      only once, so that its maximum length is 256. The list lists those
 *      characters first that are occuring in <cString> first.
 *  $EXAMPLES$
 *      ? charlist ("Hello World !") --> "Helo Wrd!"
 *  $TESTS$
 *      charlist ("Hello World !") == "Helo Wrd!"
 *      charlist (nil) == ""
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      CHARLIST() is compatible with CT3's CHARLIST().
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is charlist.c, library is libct.
 *  $SEEALSO$
 *      CHARNOLIST(),CHARSLIST(),CHARHIST()
 *  $END$
 */
/*  $DOC$
 *  $FUNCNAME$
 *      CHARSLIST()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Generates a sorted list of all characters in a string
 *  $SYNTAX$
 *      CHARSLIST ([<cString>]) -> cSortedCharacterList
 *  $ARGUMENTS$
 *      [<cString>]       is the string for whom the function generates a
 *                        sorted list of all characters
 *                        Default: "" (empty string)
 *  $RETURNS$
 *      <cSortedCharacterList>  a sorted list of the characters in <cString>
 *  $DESCRIPTION$
 *      The CHARLIST() function generates a sorted list of those characters that
 *      are contained in <cString>. This list can contain each character
 *      only once, so that its maximum length is 256. The function
 *      gives the same result as CHARSORT(CHARLIST(<cString>))
 *  $EXAMPLES$
 *      ? charslist ("Hello World !") --> " !HWdelor"
 *  $TESTS$
 *      charslist ("Hello World !") == " !HWdelor"
 *      charslist ("Hello World !") == charsort (charlist ("Hello World !"))
 *      charslist (nil) == ""
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      CHARSLIST() is only available in Harbour's CT3 library.
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is charlist.c, library is libct.
 *  $SEEALSO$
 *      CHARNOLIST(),CHARLIST(),CHARHIST()
 *  $END$
 */
/*  $DOC$
 *  $FUNCNAME$
 *      CHARNOLIST()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Generates a list of all characters not contained in a string
 *  $SYNTAX$
 *      CHARNOLIST ([<cString>]) -> cCharacterList
 *  $ARGUMENTS$
 *      [<cString>]       is the string for whom the function generates a list
 *                        of all characters not contained in that string
 *                        Default: "" (empty string)
 *  $RETURNS$
 *      <cCharacterList>  a list of the characters that are not contained in <cString>
 *  $DESCRIPTION$
 *      The CHARNOLIST() function generates a list of those characters that
 *      are not contained in <cString>. This list can contain each character
 *      only once, so that its maximum length is 256. The list is alphabetically
 *      sorted.
 *  $EXAMPLES$
 *      ? charnolist (charnolist ("Hello World !")) --> " !HWdelor"
 *  $TESTS$
 *      charnolist (charnolist ("Hello World !")) == charslist ("Hello World !")
 *      charnolist (charnolist (nil)) == ""
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      CHARNOLIST() is compatible with CT3's CHARNOLIST().
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is charlist.c, library is libct.
 *  $SEEALSO$
 *      CHARLIST(),CHARSLIST(),CHARHIST()
 *  $END$
 */
/*  $DOC$
 *  $FUNCNAME$
 *      CHARHIST()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Generates a character histogram of a string
 *  $SYNTAX$
 *      CHARHIST ([<cString>]) -> aCharacterCount
 *  $ARGUMENTS$
 *      [<cString>]       is the string for whom the function generates a
 *                        character histogram
 *                        Default: "" (empty string)
 *  $RETURNS$
 *      <aCharacterCount> an array with 256 elements where the nth element
 *                        contains the count of character #(n-1) in cString
 *  $DESCRIPTION$
 *      The CHARHIST() function generates a character histogram of those
 *      characters that are contained in <cString>. This histogram is stored
 *      in an 256-element array where the nth element contains the count
 *      of ASCII character #(n-1) in <cString>.
 *  $EXAMPLES$
 *      ? charhist ("Hello World !")[109] --> 3  // chr(108)=="l"
 *  $TESTS$
 *      charhist ("Hello World !")[109] == 3
 *      eval ({||aeval (charhist ("Hello World !"),{|x|nTotal+=x}),nTotal==len("Hello World !")}
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      CHARHIST() is only available in Harbour's CT3 library.
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is charlist.c, library is libct.
 *  $SEEALSO$
 *      CHARLIST(),CHARNOLIST(),CHARSLIST()
 *  $END$
 */
