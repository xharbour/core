/*  $DOC$
 *  $FUNCNAME$
 *      CSETREF()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Determine return value of reference sensitive CT3 string functions
 *  $SYNTAX$
 *      CSETREF ([<lNewSwitch>]) -> lOldSwitch
 *  $ARGUMENTS$
 *      [<lNewSwitch>]  .T. -> suppress return value
 *                      .F. -> do not suppress return value
 *  $RETURNS$
 *      lOldSwitch      old (if lNewSwitch is a logical value) or
 *                      current state of the switch
 *  $DESCRIPTION$
 *      Within the CT3 functions, the following functions do not
 *      change the length of a string passed as parameter while
 *      transforming this string:
 *
 *      ADDASCII()   BLANK()       CHARADD()
 *      CHARAND()    CHARMIRR()    CHARNOT()
 *      CHAROR()     CHARRELREP()  CHARREPL()
 *      CHARSORT()   CHARSWAP()    CHARXOR()
 *      CRYPT()      JUSTLEFT()    JUSTRIGHT()
 *      POSCHAR()    POSREPL()     RANGEREPL()
 *      REPLALL()    REPLLEFT()    REPLRIGHT()
 *      TOKENLOWER() TOKENUPPER()  WORDREPL()
 *      WORDSWAP()
 *
 *      Thus, these functions allow to pass the string by reference [@] to
 *      the function so that it may not be necessary to return the transformed
 *      string. By calling CSETREF (.T.), the above mentioned functions return
 *      the value .F. instead of the transformed string if the string is
 *      passed by reference to the function.
 *      The switch is turned off (.F.) by default.
 *
 *  $EXAMPLES$
 *  $TESTS$
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      This function is fully CT3 compatible.
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is ctstr.c, library is ct3.
 *  $SEEALSO$
 *      ADDASCII()   BLANK()       CHARADD()
 *      CHARAND()    CHARMIRR()    CHARNOT()
 *      CHAROR()     CHARRELREP()  CHARREPL()
 *      CHARSORT()   CHARSWAP()    CHARXOR()
 *      CRYPT()      JUSTLEFT()    JUSTRIGHT()
 *      POSCHAR()    POSREPL()     RANGEREPL()
 *      REPLALL()    REPLLEFT()    REPLRIGHT()
 *      TOKENLOWER() TOKENUPPER()  WORDREPL()
 *      WORDSWAP()
 *  $END$
 */
/*  $DOC$
 *  $FUNCNAME$
 *      CSETATMUPA()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Determine "multi-pass" behaviour in some string functions
 *  $SYNTAX$
 *      CSETATMUPA ([<lNewSwitch>]) -> lOldSwitch
 *  $ARGUMENTS$
 *      [<lNewSwitch>]  .T. -> turn "multi-pass" on
 *                      .F. -> turn "multi-pass" off
 *  $RETURNS$
 *      lOldSwitch      old (if lNewSwitch is a logical value) or
 *                      current state of the switch
 *  $DESCRIPTION$
 *      CSETATMUPA determines how the following CT3 string functions
 *      
 *      ATNUM()       AFTERATNUM()  BEFORATNUM()
 *      ATREPL()      NUMAT()       ATADJUST()
 *      WORDTOCHAR()  WORDREPL()
 *
 *      perform their work. See the respective function documentation for a
 *      further description how the switch influences these functions.
 *
 *  $EXAMPLES$
 *  $TESTS$
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      This function is fully CT3 compatible.
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is ctstr.c, library is ct3.
 *  $SEEALSO$
 *      ATNUM()       AFTERATNUM()  BEFORATNUM()
 *      ATREPL()      NUMAT()       ATADJUST()
 *      WORDTOCHAR()  WORDREPL()
 *  $END$
 */
/*  $DOC$
 *  $FUNCNAME$
 *      SETATLIKE()
 *  $CATEGORY$
 *      HBCT string functions
 *  $ONELINER$
 *      Determine scan behaviour in some string functions
 *  $SYNTAX$
 *      SETATLIKE ([<nMode>] [, <[@]cWildcard>]) --> nOldMode
 *  $ARGUMENTS$
 *      [<nMode>]   CT_SETATLIKE_EXACT    -> characters are compared exactly
 *                  CT_SETATLIKE_WILDCARD -> characters are compared using
 *                                           a wildcard character
 *                  The default value is CT_SETATLIKE_EXACT.
 *      [<[@]cWildcard>]  determines the character that is subsequently used
 *                        as a wildcard character for substring scanning.
 *                        The default value is "?".
 *                        NEW: If this parameter is passed by reference [@],
 *                        the current wildcard character is stored in
 *                        <cWildcard>.
 *  $RETURNS$
 *      nOldMode          old (if nMode is a numeric value) or
 *                        current state of the switch
 *  $DESCRIPTION$
 *      In the following CT3 functions, strings are compared on a character
 *      base:
 *
 *      ATADJUST()    ATNUM()    AFTERATNUM()
 *      BEFOREATNUM() ATREPL()   NUMAT()
 *      STRDIFF()
 *
 *      With the SETATLIKE function, one can determine when characters are
 *      considered to match within these functions. If CT_SETATLIKE_WILDCARD
 *      is set (e.g. "?"), then "?" matches every other character.
 *
 *      <nMode> can be one of the following values that are defined
 *      in ct.ch
 * 
 *      Definition            | Value
 *      ----------------------|------
 *      CT_SETATLIKE_EXACT    |   0 
 *      CT_SETATLIKE_WILDCARD |   1 
 *
 *  $EXAMPLES$
 *  $TESTS$
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      This function is fully CT3 compatible, but allows to pass the
 *      second parameter by reference so that the current wildcard character
 *      can be determined.
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is ctstr.c, header is ct.ch, library is ct3.
 *  $SEEALSO$
 *  $END$
 */
