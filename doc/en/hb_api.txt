/*
 * $Id: hb_api.txt 9279 2011-02-14 18:06:32Z druzus $
 */

/*
 * The following parts are Copyright of the individual authors.
 * www - http://www.harbour-project.org
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 *   Header file for the Extend API, Array API, misc API and base declarations
 *
 * See doc/license.txt for licensing terms.
 *
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parc()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a string parameter
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parc( int iParam, ... ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parclen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a string parameter length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parclen( int iParam, ... ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parcsiz()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a by-reference string parameter length, including terminator
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parcsiz( int iParam, ... ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_pards()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a date as a string yyyymmdd
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_pards( int iParam, ... ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_pardsbuff()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a date as a string yyyymmdd
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_pardsbuff( char * szDate, int iParam, ... ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szDate>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parinfa()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve length or element type of an array parameter
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parinfa( int iParamNum, ULONG uiArrayIndex ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <iParamNum>
 *
 *      <uiArrayIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parinfo()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Determine the param count or data type
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parinfo( int iParam ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <iParam>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a logical parameter as an int
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parl( int iParam, ... ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parnd()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a numeric parameter as a double
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parnd( int iParam, ... ) --> ( double )dResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parni()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a numeric parameter as a integer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parni( int iParam, ... ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_parnl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a numeric parameter as a long
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_parnl( int iParam, ... ) --> ( long )lResult
 *  $ARGUMENTS$
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_param()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a direct pointer to an item parameter
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_param( int iParam, int iMask ) --> ( PHB_ITEM ) pResult
 *  $ARGUMENTS$
 *      <iParam>  The 1-based parameter to retrieve.
 *
 *      <iMask>
 *  $RETURNS$
 *      hb_param() returns a direct pointer to an item on the eval stack.
 *
 *  $DESCRIPTION$
 *      This item will be removed (set to NIL) after a function cleanup,
 *      so if the item needs to survive the current function (e.g. copied
 *      to a static) you should use hb_itemParam instead.
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *      hb_itemParam()
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_pcount()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns the number of supplied parameters
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_pcount( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_pcount() --> ( ( int ) hb_stack.pBase->item.asSymbol.paramcnt )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_ret()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Post a NIL return value
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_ret( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_ret() --> hb_itemClear( &hb_stack.Return )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retc()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retc( char * szText ) --> void
 *  $ARGUMENTS$
 *      <szText>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retc( szText ) --> hb_itemPutC( &hb_stack.Return, szText )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retclen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a string with a specific length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retclen( char * szText, ULONG ulLen ) --> void
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retclen( szText, ulLen ) --> hb_itemPutCL( &hb_stack.Return, szText, ulLen )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retds()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a date, must use yyyymmdd format
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retds( char * szDate ) --> void
 *  $ARGUMENTS$
 *      <szDate>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retds( szDate ) --> hb_itemPutDS( &hb_stack.Return, szDate )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retd()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a date
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retd( long lYear, long lMonth, long lDay ) --> void
 *  $ARGUMENTS$
 *      <lYear>
 *
 *      <lMonth>
 *
 *      <lDay>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retd( lYear, lMonth, lDay ) --> hb_itemPutD( &hb_stack.Return, lYear, lMonth, lDay )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retdl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a long value as a julian date
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retdl( long lJulian ) --> void
 *  $ARGUMENTS$
 *      <lJulian>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retdl( lJulian ) --> hb_itemPutDL( &hb_stack.Return, lJulian )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a logical integer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retl( int iTrueFalse ) --> void
 *  $ARGUMENTS$
 *      <iTrueFalse>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retl( iLogical ) --> hb_itemPutL( &hb_stack.Return, iLogical ? TRUE : FALSE )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retnd()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a double
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retnd( double dNumber ) --> void
 *  $ARGUMENTS$
 *      <dNumber>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retnd( dNumber ) --> hb_itemPutND( &hb_stack.Return, dNumber )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retni()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a integer number
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retni( int iNumber ) --> void
 *  $ARGUMENTS$
 *      <iNumber>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retni( iNumber ) --> hb_itemPutNI( &hb_stack.Return, iNumber )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retnl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a long number
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retnl( long lNumber ) --> void
 *  $ARGUMENTS$
 *      <lNumber>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retnl( lNumber ) --> hb_itemPutNL( &hb_stack.Return, lNumber )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retnlen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a double, with specific width and decimals
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retnlen( double dNumber, int iWidth, int iDec ) --> void
 *  $ARGUMENTS$
 *      <dNumber>
 *
 *      <iWidth>
 *
 *      <iDec>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retnlen( dNumber, iWidth, iDec ) --> hb_itemPutNLen( &hb_stack.Return, dNumber, iWidth, iDec )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retndlen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a double, with specific width and decimals
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retndlen( double dNumber, int iWidth, int iDec ) --> void
 *  $ARGUMENTS$
 *      <dNumber>
 *
 *      <iWidth>
 *
 *      <iDec>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retndlen( dNumber, iWidth, iDec ) --> hb_itemPutNDLen( &hb_stack.Return, dNumber, iWidth, iDec )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retnilen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a integer number, with specific width
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retnilen( int iNumber, int iWidth ) --> void
 *  $ARGUMENTS$
 *      <iNumber>
 *
 *      <iWidth>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retnilen( iNumber, iWidth ) --> hb_itemPutNILen( &hb_stack.Return, iNumber, iWidth )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_retnllen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a long number, with specific width
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_retnllen( long lNumber, int iWidth ) --> void
 *  $ARGUMENTS$
 *      <lNumber>
 *
 *      <iWidth>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_retnllen( lNumber, iWidth ) --> hb_itemPutNLLen( &hb_stack.Return, lNumber, iWidth )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_reta()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns an array with a specific length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_reta( ULONG ulLen ) --> void
 *  $ARGUMENTS$
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      Note that when HB_API_MACROS is defined, this function is replaced with
 *      a macro: hb_reta( ulLen ) --> hb_arrayNew( &hb_stack.Return, ulLen )
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_storc()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Stores a szString on a variable by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_storc( char * szText, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_storclen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Stores a fixed length string on a variable by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_storclen( char * szText, ULONG ulLength, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLength>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_stords()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      SzDate must have yyyymmdd format
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_stords( char * szDate, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <szDate>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_storl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Stores a logical integer on a variable by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_storl( int iLogical, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <iLogical>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_storni()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Stores an integer on a variable by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_storni( int iValue, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <iValue>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_stornl()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Stores a long on a variable by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_stornl( long lValue, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <lValue>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_stornd()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Stores a double on a variable by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_stornd( double dValue, int iParam, ... ) --> void
 *  $ARGUMENTS$
 *      <dValue>
 *
 *      <iParam>
 *
 *      <...>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xinit()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Initialize fixed memory subsystem
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xinit( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xexit()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Deinitialize fixed memory subsystem
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xexit( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xalloc()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Allocates memory, returns NULL on failure
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xalloc( ULONG ulSize ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <ulSize>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xgrab()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Allocates memory, exits on failure
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xgrab( ULONG ulSize ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <ulSize>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xfree()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Frees memory
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xfree( void * pMem ) --> void
 *  $ARGUMENTS$
 *      <pMem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xrealloc()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Reallocates memory
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xrealloc( void * pMem, ULONG ulSize ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <pMem>
 *
 *      <ulSize>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xsize()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns the size of an allocated memory block
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xsize( void * pMem ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pMem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xquery()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Query different types of memory information
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xquery( USHORT uiMode ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <uiMode>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xmemcpy()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy more than memcpy() can
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xmemcpy( void * pDestArg, void * pSourceArg, ULONG ulLen ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <pDestArg>
 *
 *      <pSourceArg>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      If UINT_MAX is defined as ULONG_MAX then this function is replaced
 *      by a macro replacement to memcpy()
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_xmemset()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Set more than memset() can
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_xmemset( void * pDestArg, int iFill, ULONG ulLen ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <pDestArg>
 *
 *      <iFill>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *      If UINT_MAX is defined as ULONG_MAX then this function is replaced
 *      by a macro replacement to memset()
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayNew()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Creates a new array
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayNew( PHB_ITEM pItem, ULONG ulLen ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayLen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrives the array len
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayLen( PHB_ITEM pArray ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pArray>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayIsObject()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrives if the array is an object
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayIsObject( PHB_ITEM pArray ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayAdd()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Add a new item to the end of an array item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayAdd( PHB_ITEM pArray, PHB_ITEM pItemValue ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <pItemValue>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayIns()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Insert a nil item into an array, without changing the length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayIns( PHB_ITEM pArray, ULONG ulIndex ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayDel()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Delete an array item, without changing length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayDel( PHB_ITEM pArray, ULONG ulIndex ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arraySize()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Sets the array total length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arraySize( PHB_ITEM pArray, ULONG ulLen ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayLast()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve last item in an array
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayLast( PHB_ITEM pArray, PHB_ITEM pResult ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <pResult>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayRelease()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Releases an array - don't call it - use ItemRelease() !!!
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayRelease( PHB_ITEM pArray ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arraySet()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Sets an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arraySet( PHB_ITEM pArray, ULONG ulIndex, PHB_ITEM pItem ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGet()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves an item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGet( PHB_ITEM pArray, ULONG ulIndex, PHB_ITEM pItem ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetItemPtr()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns pointer to specified element of the array
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetItemPtr( PHB_ITEM pArray, ULONG ulIndex ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayCopyC()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy a string into an array item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayCopyC( PHB_ITEM pArray, ULONG ulIndex, char * szBuffer, ULONG ulLen ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *
 *      <szBuffer>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetC()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the string contained on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetC( PHB_ITEM pArray, ULONG ulIndex ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetCPtr()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the string pointer on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetCPtr( PHB_ITEM pArray, ULONG ulIndex ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetCLen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the string length contained on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetCLen( PHB_ITEM pArray, ULONG ulIndex ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the logical value contained on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetL( PHB_ITEM pArray, ULONG ulIndex ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetNI()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the int value contained on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetNI( PHB_ITEM pArray, ULONG ulIndex ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetNL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the long numeric value contained on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetNL( PHB_ITEM pArray, ULONG ulIndex ) --> ( long )lResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetND()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the double value contained on an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetND( PHB_ITEM pArray, ULONG ulIndex ) --> ( double )dResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetDS()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the date value contained in an array element
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetDS( PHB_ITEM pArray, ULONG ulIndex, char * szDate ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *
 *      <szDate>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetDL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the date value contained in an array element, as a long integer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetDL( PHB_ITEM pArray, ULONG ulIndex ) --> ( long )lResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayGetType()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves the type of an array item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayGetType( PHB_ITEM pArray, ULONG ulIndex ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayFill()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Fill an array with a given item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayFill( PHB_ITEM pArray, PHB_ITEM pValue, ULONG * pulStart, ULONG * pulCount ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <pValue>
 *
 *      <pulStart>
 *
 *      <pulCount>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayScan()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Scan an array for a given item, or until code-block item returns TRUE
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayScan( PHB_ITEM pArray, PHB_ITEM pValue, ULONG * pulStart, ULONG *
pulCount, BOOL bExact, BOOL bAllowChar ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pArray>       Array to scan
 *
 *      <pValue>       Value to search for.
 *
 *      <pulStart>     Pointer to a ULONG number, which represents the number
 *                     of item for start to scan. If pulStart is NULL,
 *                     hb_arrayScan will start from the first item.
 *
 *      <pulCount>     Pointer to a ULONG number, which represents the number
 *                     of items to scan. If pulCount is NULL, hb_arrayScan
 *                     will scan from pulStart to the end of the array.
 *
 *      <bExact>       If bExact is TRUE, it will scan for an exact matching
 *                     string. If bExact if FALSE, the exact comparsion will
 *                     depend of the hb_set.HB_SET_EXACT value.
 *
 *      <bAllowChar>   This flag indicates if single-byte strings can be
 *                     considered as numeric values.
 *  $RETURNS$
 *      The number of item on the array where pValue was found (array items
 *      starts to count from 1). If not found, returns 0.
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayEval()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Execute a code-block for every element of an array item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayEval( PHB_ITEM pArray, PHB_ITEM bBlock, ULONG * pulStart, ULONG * pulCount ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <bBlock>
 *
 *      <pulStart>
 *
 *      <pulCount>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayCopy()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy items from one array to another
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayCopy( PHB_ITEM pSrcArray, PHB_ITEM pDstArray, ULONG * pulStart, ULONG * pulCount, ULONG * pulTarget ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pSrcArray>
 *
 *      <pDstArray>
 *
 *      <pulStart>
 *
 *      <pulCount>
 *
 *      <pulTarget>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayClone()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a duplicate of an existing array, including all nested items
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayClone( PHB_ITEM pArray ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pArray>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arraySort()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Sorts an array item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arraySort( PHB_ITEM pArray, ULONG * pulStart, ULONG * pulCount, PHB_ITEM pBlock ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <pulStart>
 *
 *      <pulCount>
 *
 *      <pBlock>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_stricmp()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Compare two strings without regards to case
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_stricmp( const char * s1, const char * s2 ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <s1>
 *
 *      <s2>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strnicmp()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Compare two string without regards to case, limited by length
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strnicmp( const char * s1, const char * s2, ULONG ulLen ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <s1>
 *
 *      <s2>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strupr()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Convert a string in-place to upper-case
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strupr( char * pszText ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pszText>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strdup()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns a pointer to a newly allocated copy of the source string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strdup( const char * pszText ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pszText>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strMatchRegExp()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Compare two strings using a regular expression pattern
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strMatchRegExp( const char * szString, const char * szMask ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <szString>
 *
 *      <szMask>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strEmpty()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns whether a string contains only white space
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strEmpty( const char * szText, ULONG ulLen ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strDescend()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy a string to a buffer, inverting each character
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strDescend( char * szStringTo, const char * szStringFrom, ULONG ulLen ) --> void
 *  $ARGUMENTS$
 *      <szStringTo>
 *
 *      <szStringFrom>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strAt()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns an index to a sub-string within another string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strAt( const char * szSub, ULONG ulSubLen, const char * szText, ULONG ulLen ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <szSub>
 *
 *      <ulSubLen>
 *
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strUpper()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Convert an existing string buffer to upper case
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strUpper( char * szText, ULONG ulLen ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strLower()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Convert an existing string buffer to lower case
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strLower( char * szText, ULONG ulLen ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strncpyUpper()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy an existing string buffer to another buffer, as upper case
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strncpyUpper( char * pDest, const char * pSource, ULONG ulLen ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pDest>
 *
 *      <pSource>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strVal()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Return the numeric value of a character string representation of a number
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strVal( const char * szText, ULONG ulLen ) --> ( double )dResult
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strLTrim()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Return a pointer to the first non-white space character
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strLTrim( const char * szText, ULONG * ulLen ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_strRTrimLen()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Return length of a string, ignoring trailing white space (or true spaces)
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_strRTrimLen( const char * szText, ULONG ulLen, BOOL bAnySpace ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <szText>
 *
 *      <ulLen>
 *
 *      <bAnySpace>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_numRound()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Round a number to a specific number of digits
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_numRound( double dResult, int iDec ) --> ( double )dResult
 *  $ARGUMENTS$
 *      <dResult>
 *
 *      <iDec>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_clsReleaseAll()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Releases all defined classes
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_clsReleaseAll( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_objGetClsName()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves an object class name
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_objGetClsName( PHB_ITEM pObject ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pObject>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_objGetMethod()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns the method pointer of a object class
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_objGetMethod( PHB_ITEM pObject, PHB_SYMB pSymMsg ) --> ( PHB_FUNC )hResult
 *  $ARGUMENTS$
 *      <pObject>
 *
 *      <pSymMsg>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_objHasMsg()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns TRUE/FALSE whether szString is an existing message for object
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_objHasMsg( PHB_ITEM pObject, char * szString ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pObject>
 *
 *      <szString>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymGet()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Finds and creates a dynamic symbol if not found
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymGet( char * szName ) --> ( PHB_DYNS )hResult
 *  $ARGUMENTS$
 *      <szName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymNew()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Creates a new dynamic symbol based on a local one
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymNew( PHB_SYMB pSymbol ) --> ( PHB_DYNS )hResult
 *  $ARGUMENTS$
 *      <pSymbol>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymFind()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Finds a dynamic symbol
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymFind( char * szName ) --> ( PHB_DYNS )hResult
 *  $ARGUMENTS$
 *      <szName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymFindName()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Converts to uppercase and finds a dynamic symbol
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymFindName( char * szName ) --> ( PHB_DYNS )hResult
 *  $ARGUMENTS$
 *      <szName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymLog()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Displays all dynamic symbols
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymLog( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymRelease()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Releases the memory of the dynamic symbol table
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymRelease( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_dynsymEval()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Enumerates all dynamic symbols
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_dynsymEval( PHB_DYNS_FUNC pFunction, void * Cargo ) --> void
 *  $ARGUMENTS$
 *      <pFunction>
 *
 *      <Cargo>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargInit()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Initialize command line argument API's
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargInit( int argc, char * argv[] ) --> void
 *  $ARGUMENTS$
 *      <argc>
 *
 *      <argv[]>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargARGC()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve command line argument count
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargARGC( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargARGV()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve command line argument buffer pointer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargARGV( void ) --> ( char ** )ppszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargIsInternal()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Determine if a string is an internal setting
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargIsInternal( const char * szArg ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <szArg>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargCheck()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Check if a given internal switch (like //INFO) was set
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargCheck( const char * pszName ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <pszName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargString()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns the string value of an internal switch (like //TEMPPATH:"C:\")
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargString( const char * pszName ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pszName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargNum()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Returns the numeric value of an internal switch (like //F:90)
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargNum( const char * pszName ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <pszName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_cmdargProcessVM()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Check for command line internal arguments
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_cmdargProcessVM( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_symbolNew()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Create a new symbol
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_symbolNew( char * szName ) --> ( PHB_SYMB )hResult
 *  $ARGUMENTS$
 *      <szName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockNew()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Create a code-block
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockNew( BYTE * pBuffer, USHORT uiLocals, USHORT * pLocalPosTable, PHB_SYMB pSymbols ) --> ( HB_CODEBLOCK_PTR )hResult
 *  $ARGUMENTS$
 *      <pBuffer>
 *
 *      <uiLocals>
 *
 *      <pLocalPosTable>
 *
 *      <pSymbols>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockMacroNew()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockMacroNew( BYTE * pBuffer, USHORT usLen ) --> ( HB_CODEBLOCK_PTR )hResult
 *  $ARGUMENTS$
 *      <pBuffer>
 *
 *      <usLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockDelete()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Delete a codeblock
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockDelete( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockGetVar()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Get local variable referenced in a codeblock
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockGetVar( PHB_ITEM pItem, LONG iItemPos ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <iItemPos>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockGetRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Get local variable passed by reference
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockGetRef( PHB_ITEM pItem, PHB_ITEM pRefer ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <pRefer>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockEvaluate()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Evaluate a codeblock
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockEvaluate( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockCopy()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy a codeblock
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockCopy( PHB_ITEM pDest, PHB_ITEM pSource ) --> void
 *  $ARGUMENTS$
 *      <pDest>
 *
 *      <pSource>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarValueNew()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Create a new global value
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarValueNew( HB_ITEM_PTR pSource, BOOL bTrueMemvar ) --> ( HB_HANDLE )hResult
 *  $ARGUMENTS$
 *      <pSource>
 *
 *      <bTrueMemvar>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarValueBaseAddress()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve the base address of the values table
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarValueBaseAddress( void ) --> ( HB_VALUE_PTR * )phResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarsInit()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Initialize the memvar API system
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarsInit( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarsRelease()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Clear all PUBLIC and PRIVATE variables
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarsRelease( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarsFree()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Release the memvar API system
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarsFree( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarValueIncRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Increase the reference count of a global value
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarValueIncRef( HB_HANDLE hValue ) --> void
 *  $ARGUMENTS$
 *      <hValue>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarValueDecRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Decrease the reference count of a global value
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarValueDecRef( HB_HANDLE hValue ) --> void
 *  $ARGUMENTS$
 *      <hValue>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarSetValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy an item into a symbol
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarSetValue( PHB_SYMB pMemvarSymb, HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pMemvarSymb>
 *
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarGet()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy an symbol value into an item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarGet( HB_ITEM_PTR pItem, PHB_SYMB pMemvarSymb ) --> ( ERRCODE )hResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <pMemvarSymb>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarGetValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy an symbol value into an item, with error trapping
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarGetValue( HB_ITEM_PTR pItem, PHB_SYMB pMemvarSymb ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <pMemvarSymb>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarGetRefer()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Copy a reference to a symbol value into an item, with error trapping
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarGetRefer( HB_ITEM_PTR pItem, PHB_SYMB pMemvarSymb ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <pMemvarSymb>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarGetPrivatesBase()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve current PRIVATE variables stack base
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarGetPrivatesBase( void ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarSetPrivatesBase()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Release PRIVATE variables created after specified base
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarSetPrivatesBase( ULONG ulBase ) --> void
 *  $ARGUMENTS$
 *      <ulBase>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarNewParameter()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarNewParameter( PHB_SYMB pSymbol, PHB_ITEM pValue ) --> void
 *  $ARGUMENTS$
 *      <pSymbol>
 *
 *      <pValue>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarGetStrValuePtr()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarGetStrValuePtr( char * szVarName, ULONG *pulLen ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szVarName>
 *
 *      <*pulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarCreateFromItem()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarCreateFromItem( PHB_ITEM pMemvar, BYTE bScope, PHB_ITEM pValue ) --> void
 *  $ARGUMENTS$
 *      <pMemvar>
 *
 *      <bScope>
 *
 *      <pValue>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarScope()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve scope of a dynamic variable symbol
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarScope( char * szVarName, ULONG ulLength ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <szVarName>
 *
 *      <ulLength>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conInit()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Initialize the console API system
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conInit( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conRelease()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Release the console API system
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conRelease( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conNewLine()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a pointer to a static buffer containing new-line characters
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conNewLine( void ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conOutStd()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Output an string to STDOUT
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conOutStd( char * pStr, ULONG ulLen ) --> void
 *  $ARGUMENTS$
 *      <pStr>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conOutErr()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Output an string to STDERR
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conOutErr( char * pStr, ULONG ulLen ) --> void
 *  $ARGUMENTS$
 *      <pStr>
 *
 *      <ulLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conSetCursor()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve and optionally set cursor shape
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conSetCursor( BOOL bSetCursor, USHORT usNewCursor ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <bSetCursor>
 *
 *      <usNewCursor>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conSetColor()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve and optionally set console color
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conSetColor( char * szColor ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szColor>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_conXSaveRestRelease()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Release the save/restore API
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_conXSaveRestRelease( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_compReservedName()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Determines if a string contains a reserve word
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_compReservedName( char * szName ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_procname()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve a procedure name into a buffer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_procname( int iLevel, char * szName ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <iLevel>
 *
 *      <szName>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroGetValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieve results of a macro expansion
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroGetValue( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroSetValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Assign a value to a macro-expression item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroSetValue( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroTextValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Macro text substitution
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroTextValue( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroPushSymbol()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Handle a macro function calls, e.g. var := &macro()
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroPushSymbol( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroRun()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Executes pcode compiled by macro compiler
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroRun( HB_MACRO_PTR pMacro ) --> void
 *  $ARGUMENTS$
 *      <pMacro>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroCompile()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Compile a string and return a pcode buffer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroCompile( char * szString ) --> ( HB_MACRO_PTR )hResult
 *  $ARGUMENTS$
 *      <szString>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroDelete()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Release all memory allocated for macro evaluation
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroDelete( HB_MACRO_PTR pMacro ) --> void
 *  $ARGUMENTS$
 *      <pMacro>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroTextSubst()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Substitute macro variables occurences within a given string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroTextSubst( char * szString, ULONG *pulStringLen ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <szString>
 *
 *      <*pulStringLen>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroIsIdent()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Determine if a string is a valid function or variable name
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroIsIdent( char * szString ) --> ( BOOL )bResult
 *  $ARGUMENTS$
 *      <szString>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroPopAliasedValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Compiles and evaluates an aliased macro expression
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroPopAliasedValue( HB_ITEM_PTR pAlias, HB_ITEM_PTR pVar ) --> void
 *  $ARGUMENTS$
 *      <pAlias>
 *
 *      <pVar>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroPushAliasedValue()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Compiles and evaluates an aliased macro expression
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroPushAliasedValue( HB_ITEM_PTR pAlias, HB_ITEM_PTR pVar ) --> void
 *  $ARGUMENTS$
 *      <pAlias>
 *
 *      <pVar>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_macroGetType()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Determine the type of an expression
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_macroGetType( HB_ITEM_PTR pItem ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcAlloc()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Allocates a memory controlled by the garbage collector
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcAlloc( ULONG ulSize, HB_GARBAGE_FUNC_PTR pFunc ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <ulSize>
 *
 *      <pFunc>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcFree()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Deallocates a memory allocated by the garbage collector
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcFree( void *pAlloc ) --> void
 *  $ARGUMENTS$
 *      <*pAlloc>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcLock()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Do not release passed memory block
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcLock( void *pAlloc ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <*pAlloc>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcUnlock()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Passed block is allowed to be released
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcUnlock( void *pAlloc ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <*pAlloc>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcLockItem()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Do not release a memory block stored inside an item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcLockItem( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcUnlockItem()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Allow to release the item
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcUnlockItem( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcCollect()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Checks if a single memory block can be released
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcCollect( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcCollectAll()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Checks if all memory blocks can be released
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcCollectAll( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_gcItemRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Checks if passed item refers passed memory block pointer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_gcItemRef( HB_ITEM_PTR pItem ) --> void
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_vmIsLocalRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Hvm.c - mark all local variables as used
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_vmIsLocalRef( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_vmIsStaticRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Hvm.c - mark all static variables as used
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_vmIsStaticRef( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_memvarsIsMemvarRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Memvars.c - mark all memvar variables as used
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_memvarsIsMemvarRef( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_clsIsClassRef()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Classes.c - mark all class internals as used
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_clsIsClassRef( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_codeblockDeleteGarbage()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Clear a codeblock before releasing by the GC
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_codeblockDeleteGarbage( void * Cargo ) --> void
 *  $ARGUMENTS$
 *      <Cargo>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_arrayReleaseGarbage()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Clear an array before releasing by the GC
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_arrayReleaseGarbage( void * Cargo ) --> void
 *  $ARGUMENTS$
 *      <Cargo>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_idleState()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Services a single idle state
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_idleState( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_idleReset()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Services a single idle state
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_idleReset( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_idleShutDown()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Closes all background tasks
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_idleShutDown( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_verPlatform()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves a newly allocated buffer containing platform version
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_verPlatform( void ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_verCompiler()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves a newly allocated buffer containing compiler version
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_verCompiler( void ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_verHarbour()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Retrieves a newly allocated buffer containing harbour version
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_verHarbour( void ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      hb_verBuildInfo()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Display harbour, compiler, and platform versions to standard console
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapi.h>
 *      hb_verBuildInfo( void ) --> void
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Library is vm
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_OF_TYPE()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_OF_TYPE( p, t ) --> <see ( ( ( p )->type & ~HB_IT_BYREF ) == t )>
 *  $ARGUMENTS$
 *      <p>
 *
 *      <t>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_BYREF()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_BYREF( p ) --> <see ( ( p )->type & HB_IT_BYREF )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_ARRAY()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_ARRAY( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_ARRAY )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_NIL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_NIL( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_NIL )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_BLOCK()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_BLOCK( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_BLOCK )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_DATE()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_DATE( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_DATE )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_DOUBLE()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_DOUBLE( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_DOUBLE )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_INTEGER()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_INTEGER( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_INTEGER )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_LOGICAL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_LOGICAL( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_LOGICAL )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_LONG()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_LONG( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_LONG )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_NUMERIC()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_NUMERIC( p ) --> <see ( ( p )->type & HB_IT_NUMERIC )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_OBJECT()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_OBJECT( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_OBJECT )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_STRING()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_STRING( p ) --> <see ( ( ( p )->type & ~( HB_IT_BYREF | HB_IT_MEMOFLAG ) ) == HB_IT_STRING )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_MEMO()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_MEMO( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_MEMO )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_SYMBOL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_SYMBOL( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_SYMBOL )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_MEMVAR()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_MEMVAR( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_MEMVAR )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_IS_POINTER()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_IS_POINTER( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_POINTER )>
 *  $ARGUMENTS$
 *      <p>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISNIL()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      NOTE: Intentionally using a different method
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISNIL( n ) --> <see ( hb_param( n, HB_IT_ANY ) == NULL || HB_IS_NIL( hb_param( n, HB_IT_ANY ) ) )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISCHAR()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISCHAR( n ) --> <see ( hb_param( n, HB_IT_STRING ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISNUM()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISNUM( n ) --> <see ( hb_param( n, HB_IT_NUMERIC ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISLOG()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISLOG( n ) --> <see ( hb_param( n, HB_IT_LOGICAL ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISDATE()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISDATE( n ) --> <see ( hb_param( n, HB_IT_DATE ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISMEMO()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISMEMO( n ) --> <see ( hb_param( n, HB_IT_MEMO ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISBYREF()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      NOTE: Intentionally using a different method
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISBYREF( n ) --> <see ( hb_parinfo( n ) & HB_IT_BYREF )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISARRAY()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISARRAY( n ) --> <see ( hb_param( n, HB_IT_ARRAY ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISOBJECT()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISOBJECT( n ) --> <see ( ISARRAY( n ) && hb_param( n, HB_IT_ARRAY )->asArray.value->uiClass != 0 )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISBLOCK()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Not available in CA-Cl*pper.
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISBLOCK( n ) --> <see ( hb_param( n, HB_IT_BLOCK ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      ISPOINTER()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *      Not available in CA-Cl*pper.
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      ISPOINTER( n ) --> <see ( hb_param( n, HB_IT_POINTER ) != NULL )>
 *  $ARGUMENTS$
 *      <n>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      HB_ISSPACE()
 *  $CATEGORY$
 *      Extend API
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype (macro definition)
 *
 *      #include <hbapi.h>
 *      HB_ISSPACE( c ) --> <see ( ( c ) == ' ' || ( c ) == HB_CHAR_HT || ( c ) == HB_CHAR_LF || ( c ) == HB_CHAR_CR )>
 *  $ARGUMENTS$
 *      <c>
 *  $RETURNS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      Compliance is not applicable to API calls.
 *  $FILES$
 *      Header file is hbapi.h
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

